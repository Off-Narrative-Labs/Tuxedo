searchState.loadedDescShard("tuxedo_template_wallet", 0, "A simple CLI wallet. For now it is a toy just to start …\nThe default RPC endpoint for the wallet to connect to\nToy off-chain process to create an amoeba and perform …\nTuxedo Template Wallet’s Command Line Interface.\nGenerate the platform-specific default data path for the …\nParse a string into an H256 that represents a public key\nWallet’s local keystore.\nWallet features related to spending money and checking …\nParse an output ref from a string\nParachain compatibility for the template wallet.\nUtility to pretty print an outer verifier\nStrongly typed helper functions for communicating with the …\nTakes a string and checks for a 0x prefix. Returns a …\nThis module is responsible for maintaining the wallet’s …\nGenerate a plaform-specific temporary directory for the …\nWallet features related to on-chain timestamps.\nDemonstrate creating an amoeba and performing mitosis on …\nThe wallet’s main CLI struct\nThe tasks supported by the wallet\nThe default number of coins to be minted.\nGenerate a private key using either some or no password …\nInsert a private key into the keystore to later use when …\nMint coins , optionally amount and publicKey of owner can …\nRemove a specific key from the keystore. WARNING! This …\nShow the complete list of UTXOs known to the wallet.\nFor each key tracked by the wallet, shows the sum of all …\nShow public information about all the keys in the keystore.\nShow the latest on-chain timestamp.\nSpend some coins. For now, all outputs in a single …\nVerify that a particular coin exists. Show its value and …\nPass the amount to be minted.\nPath where the wallet data is stored. Default value is …\nSpecify a development wallet instance, using a temporary …\nRPC endpoint of the node that this wallet will connect to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAn input to be consumed by this transaction. This argument …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSkip the initial sync that the wallet typically performs …\nAn output amount. For the transaction to be valid, the …\nHex encoded address (sr25519 pubkey) of the owner.\nUse the Parachain template encoding instead of the regular …\nHex encoded address (sr25519 pubkey) of the recipient.\nA temporary directory will be created to store the …\nA hex-encoded output reference\nInitialize a public/private key pair with a password\nThe public key to remove\nSeed phrase of the key to insert.\nA KeyTypeId to use in the keystore for Tuxedo …\nA default seed phrase for signing inputs when none is …\nThe public key corresponding to the default seed above.\nGenerate a new key from system entropy and insert it into …\nCheck whether a specific key is in the keystore\nInsert the example “Shawn” key into the keystore for …\nInsert the private key associated with the given seed into …\nCaution. Removes key from keystore. Call with care.\nSign a given message with the private key that corresponds …\nApply a transaction to the local database, storing the new …\nGiven an output ref, fetch the details about this coin …\nCreate and send a transaction that mints the coins on the …\nCreate and send a transaction that spends coins on the …\nThe Filter type which is the closure signature used by …\nThe Filter type which is the closure signature used by …\nBuilds a filter to be passed to wallet sync functions to …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nWe don’t want the wallet to depend on the huge parachain …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nFetch an output from chain storage given an OutputRef\nGet the node’s full opaque block at a particular hash\nTyped helper to get the Node’s block hash at a …\nThe identifier for the blocks tree in the db.\nThe identifier for the block_hashes tree in the db.\nThe identifier for the spent tree in the db.\nThe identifier for the unspent tree in the db.\nAdd a new output to the database updating all tables.\nApply a block to the local database\nApply a single transaction to the local database The …\nPicks an arbitrary set of unspent outputs from the …\nIterate the entire unspent set summing the values of the …\nGets the block from the local database given a block hash. …\nGets the block hash from the local database given a block …\nGets the owner and amount associated with an output ref …\nGet the block height that the wallet is currently synced to\nOpen a database at the given location intended for the …\nDebugging use. Print out the entire block_hashes tree.\nDebugging use. Print the entire unspent outputs tree.\nRemove an output from the database updating all tables.\nMark an existing output as spent. This does not purge all …\nSynchronize the local database to the database of the …\nUnapply the best block that the wallet currently knows …\nRun a transaction backwards against a database. Mark all …\nMark an output that was previously spent back as unspent.\nThe identifier for the current timestamp in the db.\nApply a transaction to the local database, storing the new …")